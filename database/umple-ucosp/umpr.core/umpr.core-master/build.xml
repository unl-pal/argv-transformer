<?xml version="1.0" encoding="UTF-8"?>
<project name="umpr.core" xmlns:ivy="antlib:org.apache.ivy.ant" default="all">

  <property file="build.properties" />

  <exec executable="git" outputproperty="git.revision">
    <arg value="describe" />
    <arg value="--always" />
  </exec>
  <property name="version" value="0.0.0-${git.revision}" />

  <property name="build.dir" value="bin" />
  <property name="build.dir.main" value="${build.dir}/main" />
  <property name="build.dir.main.compile" value="${build.dir.main}" />
  <property name="build.dir.main.resources" value="${build.dir.main.compile}" />

  <!-- Tests -->
  <property name="test.groups" value="" />
  <property name="test.excludegroups" value="long-runtime" />
  <property name="build.dir.test" value="bin/test" />
  <property name="build.dir.test.report" value="test-report" />
  <property name="build.dir.test.compile" value="${build.dir.test}" />
  <property name="build.dir.test.resources" value="${build.dir.test.compile}" />

  <!-- src directories -->
  <property name="src.dir" value="src" />
  <property name="src.dir.main" value="${src.dir}/main" />
  <property name="src.dir.main.java" value="${src.dir.main}/java" />
  <property name="src.dir.main.resources" value="${src.dir.main}/resources" />
  <property name="src.dir.main.umple" value="${src.dir.main}/umple" />
  <property name="src.dir.gen" value="${src.dir}/gen" />
  <property name="src.dir.gen.umple" value="${src.dir.gen}/umple" />
  <property name="src.dir.test" value="${src.dir}/test" />
  <property name="src.dir.test.java" value="${src.dir.test}/java" />
  <property name="src.dir.test.resources" value="${src.dir.test}/fixtures" />

  <!-- distribution -->
  <property name="dist.dir" value="${build.dir}/target" />
  <property name="dist.dependency.jar" value="${dist.dir}/dependencies-all-${version}.jar" />
  <property name="dist.target.jar" value="${dist.dir}/${ant.project.name}-lib-${version}.jar" />
  <property name="dist.target.fat.jar" value="${dist.dir}/${ant.project.name}-${version}.jar" />
  <property name="dist.main.class" value="cruise.umple.umpr.core.ConsoleMain" />

  <!-- Dependencies -->
  <property name="lib.dir" value="${basedir}/lib" />

  <!-- Manual Dependencies -->
  <property name="lib.manual.dir" value="${lib.dir}/manual" />
  <property name="umple.core.jar" value="${lib.manual.dir}/umple.jar" />

  <!-- Ivy -->
  <property name="ivy.install.version" value="2.4.0" />
  <property name="ivy.jar.dir" value="${lib.manual.dir}" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />
  <property name="ivy.lib.dir" value="${lib.dir}/ivy" />

  <!-- Module umpr.core -->

  <target name="download-manual-dep" unless="skip.download">
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${ivy.jar.dir}" />
    <mkdir dir="${lib.manual.dir}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
         dest="${ivy.jar.file}" usetimestamp="true" />

    <!-- this isn't actually Ivy, but its the smartest place to do this; eventually we'll use Ivy :) -->
    <get src="http://try.umple.org/scripts/umple.jar" 
         dest="${umple.core.jar}"
         usetimestamp="true" />
    <taskdef name="umplec" classname="cruise.umple.util.UmplecAntTask" classpath="${umple.core.jar}" />
  </target>

  <target name="install-ivy" depends="download-manual-dep" description="Install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar" />
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
  </target>

  <target name="ivy-resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
    <ivy:resolve />
    <ivy:retrieve sync="true" />
  	
  	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
  	  <classpath>
  	    <pathelement location="${ivy.lib.dir}/ant-contrib-1.0b3.jar"/>
  	  </classpath>
  	</taskdef>
  </target>

  <target name="umpleGen" depends="init" description="Run umple against models shared between web interface">
    <umplec src="${src.dir.main.umple}/Master.ump" dest="${src.dir.gen.umple}" generate="Java" />
  </target>
  
  <target name="compile.quick" depends="init" description="Run compilation of library code, no dependencies are run.">
    <echo message="Compling umple sources ${src.dir.gen.umple} -> ${build.dir.main.compile}" />
    <echo message="Compling core ${src.dir.main.java} -> ${build.dir.main.compile}" />
    <javac srcdir="${src.dir.gen.umple}:${src.dir.main.java}" destdir="${build.dir.main.compile}" includeantruntime="true">
      <classpath refid="build.path" />
      <classpath path="${umple.core.jar}" />
      <exclude name="**/.git" />
    </javac>

    <!-- Uncomment if resources are required -->
    <!-- <copy todir="${build.dir.resources}">
        <fileset dir="${src.dir.resources}"
           includes="**/*.properties,**/*.ecore" /> 
    </copy> -->
  </target>

  <target name="compile" depends="init, ivy-resolve, umpleGen, compile.quick" description="Compile core code">
    
  </target>
  
  <target name="test.compile.quick" depends="compile.quick" description="Only compile code, no dependencies.">
    <echo message="Compling test cases ${src.dir.test.java} -> ${build.dir.test.compile}" />
    <javac srcdir="${src.dir.test.java}" destdir="${build.dir.test.compile}" includeantruntime="true">
      <classpath refid="test.path" />
      <classpath path="${umple.core.jar}" />
      <classpath path="${build.dir.main.compile}" />
      <exclude name="**/.git" />
    </javac>
    <copy todir="${build.dir.test.resources}">
      <fileset dir="${src.dir.test.resources}" includes="**/*.xml,**/*.properties,**/*.html,**/*.ecore" />
    </copy>
  </target>

  <target name="test.compile" depends="init, compile, test.compile.quick" description="Compile test code">
    
  </target>

  <target name="test" depends="test.compile" description="Run TestNG test cases">
    <taskdef name="testng" classname="org.testng.TestNGAntTask">
      <classpath>
        <path refid="ivylib.path.id" />
      </classpath>
    </taskdef>

    <echo>Running tests -> ${build.dir.test.report}</echo>
    <testng workingDir="${build.dir.test.report}"
            outputdir="${build.dir.test.report}" 
            failureProperty="testsFailed" 
    	      groups="${test.groups}" 
    	      excludedgroups="${test.excludegroups}">
      <classpath>
        <pathelement location="${build.dir.main.compile}" />
        <pathelement location="${build.dir.test.compile}" />
        <pathelement location="${umple.core.jar}" />
        <path refid="ivylib.path.id" />
      </classpath>
      <classfileset dir="${build.dir.test.compile}" includes="**/*.class" />
    </testng>
  	
  	<if>
  		<isset property="testsFailed"/>
  		<then>
  			<loadfile property="failedTestCases"
  			      srcFile="${build.dir.test.report}/testng-failed.xml" />
  			<fail message="${failedTestCases}" />
  		</then>
		</if>

  </target>

  <!-- Group all dependencies into a big dependency-all.jar -->
  <target name="package.dependencies" depends="init, ivy-resolve">
    <delete dir="${dist.dir}" />
    <mkdir dir="${dist.dir}" />

    <jar jarfile="${dist.dependency.jar}">
      <zipgroupfileset dir="${ivy.lib.dir}">
        <include name="**/*.jar" />
      </zipgroupfileset>
      <zipfileset src="${umple.core.jar}" excludes="META-INF/*.SF" />
    </jar>

  </target>

  <!-- jar it, extract above dependency-all.jar and zip it with project files -->
  <target name="package" depends="compile, package.dependencies" description="package, output to JAR">

    <mkdir dir="${dist.dir}" />

    <jar jarfile="${dist.target.jar}" basedir="${build.dir.main}" />

    <jar jarfile="${dist.target.fat.jar}" basedir="${build.dir.main}">
      <manifest>
        <attribute name="Main-Class" value="${dist.main.class}" />
      </manifest>
      <zipfileset src="${dist.dependency.jar}" excludes="META-INF/*.SF" />
      <zipfileset src="${dist.target.jar}" excludes="META-INF/*.SF" />
    </jar>

  </target>

  <target name="clean" description="cleanup module">
    <delete dir="${build.dir.main}" />
    <delete dir="${build.dir.test}" />
    <delete includeemptydirs="true">
      <fileset dir="${src.dir.gen.umple}" excludes="**/.gitkeep" defaultexcludes="false" />
    </delete>
    <delete dir="${dist.dir}" />
  </target>

  <target name="real-clean" depends="clean" description="Clean-up everything, including dependencies">
    <delete dir="${lib.dir}" />
  </target>

  <target name="init" description="Build initialization" depends="install-ivy">
    <mkdir dir="${build.dir.main}" />
    <mkdir dir="${build.dir.main.compile}" />

    <mkdir dir="${build.dir.test}" />
    <mkdir dir="${build.dir.test.compile}" />
  	
  	<!-- Setup the ivy class paths -->
  	<ivy:cachepath pathid="build.path" conf="build" />
    <ivy:cachepath pathid="test.path" conf="test" />

    <path id="ivylib.path.id">
      <fileset dir="${ivy.lib.dir}" />
    </path>
  </target>

  <target name="build.modules" depends="clean, init, compile" description="build all modules" />

  <target name="all" depends="build.modules" description="build all" />
</project>
